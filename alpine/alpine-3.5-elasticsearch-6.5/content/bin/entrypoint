#!/bin/bash -e


# Add Custom UserID as "User" User
if [ "$(id -u)" != "0" ]; then
  sed "s/^user:\(.*\):[0-9]\+:\([0-9]\+\):.*:\(.*:.*\)/user:\1:$(id -u):\2:User:\3/g" < /etc/passwd > /tmp/passwd \
  && cat /tmp/passwd > /etc/passwd \
  && rm -f /tmp/passwd
fi


# Add Function to Check if Array Contains Some Value
function isArrayContains() {
  local LOOP_N=$#
  local VALUE_CHECK=${!LOOP_N}

  for ((i=1;i<${LOOP_N};i++)) {
    if [[ $(echo "${!i}" | grep "^${VALUE_CHECK}" | wc -l) == 1 ]]; then
      echo "y"
      return 0
    fi
  }

  echo "n"
  return 1
}


# Export ElasticSearch Command
if [ "${1:0:1}" = '-' ]; then
	set -- elasticsearch "$@"
fi


# Configure ElasticSearch Variable
ES_DOMAIN=`hostname -d`
ES_HOST_NAME=`hostname -s`
ES_HTTP_PORT=${ES_HTTP_PORT:-"9200"}
ES_TCP_PORT=${ES_TCP_PORT:-"9300"}
if [[ -n $ES_DOMAIN ]]; then
  ES_NODE_NAME=${ES_NODE_NAME:-"${ES_HOST_NAME}.${ES_DOMAIN}"}
else
  ES_NODE_NAME=${ES_NODE_NAME:-"${ES_HOST_NAME}"}
fi
ES_XPACK_LICENSE=${ES_XPACK_LICENSE:-"basic"}
ES_ACTION_AUTO_CREATE_INDEX=${ES_ACTION_AUTO_CREATE_INDEX:-"*"}
ES_MEMORY_LOCK=${ES_MEMORY_LOCK:-"false"}


# Configure ElasticSearch Cluster Variable
# ES_MASTER_COUNT=${ES_MASTER_COUNT:-1}
# ES_MASTER_AUTO_QUORUM=${ES_MASTER_AUTO_QUORUM:-"true"}
#
# if [ $ES_MASTER_COUNT -gt 1 ]; then
#   # Automate Master Quorum Calculation
#   if [[ $ES_MASTER_AUTO_QUORUM == "true" ]]; then
#     ES_MASTER_HALF=$(($ES_MASTER_COUNT/2))
#     ES_MASTER_QUORUM=$((($ES_MASTER_COUNT/$ES_MASTER_HALF)+1))
#
#     ES_ARGS_CLUSTER="${ES_ARGS_CLUSTER} -Ediscovery.zen.minimum_master_nodes=${ES_MASTER_QUORUM} "
#   fi
#
#   # Automate Master Host File Provider Creation
#   if [ `echo ${ES_ARGS} | grep node.master | wc -l` -eq 1 ]; then
#     if [[ $ES_HOST_NAME =~ (.*)-([0-9]+)$ ]]; then
#       for (( ES_MASTER_LOOP=0; ES_MASTER_LOOP<$ES_MASTER_COUNT; ES_MASTER_LOOP++ ))
#       do
#         echo "${ES_HOST_NAME}-${ES_MASTER_LOOP}.${ES_DOMAIN}:${ES_TCP_PORT}" >> ${ES_PATH_CONF}/unicast_hosts.txt
#       done
#     elif [[ $ES_HOST_NAME =~ (.*)_([0-9]+)$ ]]; then
#       for (( ES_MASTER_LOOP=0; ES_MASTER_LOOP<$ES_MASTER_COUNT; ES_MASTER_LOOP++ ))
#       do
#         echo "${ES_HOST_NAME}_${ES_MASTER_LOOP}.${ES_DOMAIN}:${ES_TCP_PORT}" >> ${ES_PATH_CONF}/unicast_hosts.txt
#       done
#     fi
#  
#     ES_ARGS_CLUSTER="${ES_ARGS_CLUSTER} -Ediscovery.zen.hosts_provider=file"
#   fi
# fi


# Configure ElasticSearch X-Pack Security
if [[ -n ${ES_PASSWORD} ]]; then
  if [[ ! -z ${ES_PASSWORD} ]]; then
    [[ -f ${ES_HOME}/config/elasticsearch.keystore ]] || elasticsearch-keystore create
    echo "${ES_PASSWORD}" | elasticsearch-keystore add -x 'bootstrap.password'

    ES_ARGS_OPTS+=" -Expack.security.enabled=true"
  fi
fi


# Configure ElasticSearch Arguments
declare -a ES_ARGS
ES_ARGS+=("-Expack.license.self_generated.type=${ES_XPACK_LICENSE}" "-Eaction.auto_create_index=${ES_ACTION_AUTO_CREATE_INDEX}" "-Ebootstrap.memory_lock=${ES_MEMORY_LOCK}" "-Ehttp.enabled=true" "-Ehttp.port=${ES_HTTP_PORT}" "-Etransport.tcp.port=${ES_TCP_PORT}" "-Enetwork.host=0.0.0.0" "-Enode.name=${ES_NODE_NAME}")

if [[ -n ${ES_ARGS_OPTS} ]]; then
  if [[ ! -z ${ES_ARGS_OPTS} ]]; then
    for ES_ARGS_OPTS_DATA in `echo $ES_ARGS_OPTS`
    do
      ES_ARGS+=("${ES_ARGS_OPTS_DATA}")
    done
    unset ES_ARGS_OPTS
  fi
fi

if [[ $(isArrayContains "${ES_ARGS[@]}" "-Ediscovery.type") == "n" ]]; then
  ES_ARGS+=("-Ediscovery.type=single-node")
fi

# if [[ -n $ES_ARGS_CLUTSER ]]; then
#   for ES_ARGS_CLUTSER_DATA in `echo $ES_ARGS_CLUSTER`
#   do
#     ES_ARGS+=("${ES_ARGS_CLUTSER_DATA}")
#   done
#   unset ES_ARGS_CLUSTER
# fi

export ES_JAVA_OPTS="-Des.cgroups.hierarchy.override=/ ${ES_JAVA_OPTS}"


# Execute Everything from Entries
if [ "$(id -u)" != "0" ]; then
  if [[ $1 == "elasticsearch" ]]; then
    exec "$@" "${ES_ARGS[@]}"
  else
    exec "$@"
  fi
else
  if [[ $1 == "elasticsearch" ]]; then
    su-exec user "$@" "${ES_ARGS[@]}"
  else
    su-exec user "$@"
  fi
fi
